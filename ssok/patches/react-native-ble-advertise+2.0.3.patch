diff --git a/node_modules/react-native-ble-advertise/android/src/main/java/com/bleadvertise/BleAdvertiseModule.java b/node_modules/react-native-ble-advertise/android/src/main/java/com/bleadvertise/BleAdvertiseModule.java
index 6cbdbfd..36fb8d4 100644
--- a/node_modules/react-native-ble-advertise/android/src/main/java/com/bleadvertise/BleAdvertiseModule.java
+++ b/node_modules/react-native-ble-advertise/android/src/main/java/com/bleadvertise/BleAdvertiseModule.java
@@ -9,9 +9,8 @@ import com.facebook.react.bridge.ReactContextBaseJavaModule;
 import com.facebook.react.bridge.ReactMethod;
 import com.facebook.react.bridge.WritableArray;
 
-import java.util.HashMap;
+import java.util.Collections;
 import java.util.Map;
-import java.lang.Object;
 import java.util.Hashtable;
 import java.util.Set;
 import java.util.UUID;
@@ -24,9 +23,9 @@ import android.bluetooth.le.AdvertiseData;
 import android.bluetooth.le.AdvertiseSettings;
 import android.bluetooth.le.BluetoothLeAdvertiser;
 
-public class BleAdvertiseModule extends NativeBleAdvertiseSpec {
+public class BleAdvertiseModule extends ReactContextBaseJavaModule {
 
-    public static String NAME = "BleAdvertise";
+    public static final String NAME = "BleAdvertise";
     private BluetoothAdapter mBluetoothAdapter;
     private static Hashtable<String, BluetoothLeAdvertiser> mAdvertiserList;
     private static Hashtable<String, AdvertiseCallback> mAdvertiserCallbackList;
@@ -35,8 +34,8 @@ public class BleAdvertiseModule extends NativeBleAdvertiseSpec {
 
     public BleAdvertiseModule(ReactApplicationContext reactContext) {
         super(reactContext);
-        mAdvertiserList = new Hashtable<String, BluetoothLeAdvertiser>();
-        mAdvertiserCallbackList = new Hashtable<String, AdvertiseCallback>();
+        mAdvertiserList = new Hashtable<>();
+        mAdvertiserCallbackList = new Hashtable<>();
         mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
         if (mBluetoothAdapter != null) {
             mObservedState = mBluetoothAdapter.isEnabled();
@@ -44,41 +43,40 @@ public class BleAdvertiseModule extends NativeBleAdvertiseSpec {
         this.companyId = 0x0000;
     }
 
-    @Override
     @NonNull
+    @Override
     public String getName() {
         return NAME;
     }
 
     @Override
+    public Map<String, Object> getConstants() {
+        return Collections.emptyMap();
+    }
+
+    @ReactMethod
     public void setCompanyId(double companyId) {
-        this.companyId = (int)companyId;
+        this.companyId = (int) companyId;
     }
 
-    @Override
+    @ReactMethod
     public void broadcast(String uid, double major, double minor, Promise promise) {
         try {
             if (mBluetoothAdapter == null) {
-                Log.w("BleAdvertiseModule", "Device does not support Bluetooth. Adapter is Null");
-                promise.reject("Device does not support Bluetooth. Adapter is Null");
+                Log.w(NAME, "Device does not support Bluetooth. Adapter is Null");
+                promise.reject("E_NO_BLUETOOTH", "Device does not support Bluetooth");
                 return;
             }
 
             if (companyId == 0x0000) {
-                Log.w("BleAdvertiseModule", "Invalid company id");
-                promise.reject("Invalid company id");
+                Log.w(NAME, "Invalid company id");
+                promise.reject("E_INVALID_COMPANY_ID", "Invalid company id");
                 return;
             }
 
-            if (mBluetoothAdapter == null) {
-                Log.w("BleAdvertiseModule", "mBluetoothAdapter unavailable");
-                promise.reject("mBluetoothAdapter unavailable");
-                return;
-            }
-
-            if (mBluetoothAdapter.isEnabled() == false) {
-                Log.w("BleAdvertiseModule", "Bluetooth disabled");
-                promise.reject("Bluetooth disabled");
+            if (!mBluetoothAdapter.isEnabled()) {
+                Log.w(NAME, "Bluetooth disabled");
+                promise.reject("E_BLUETOOTH_DISABLED", "Bluetooth disabled");
                 return;
             }
 
@@ -88,22 +86,20 @@ public class BleAdvertiseModule extends NativeBleAdvertiseSpec {
             if (mAdvertiserList.containsKey(uid)) {
                 tempAdvertiser = mAdvertiserList.remove(uid);
                 tempCallback = mAdvertiserCallbackList.remove(uid);
-
                 tempAdvertiser.stopAdvertising(tempCallback);
             } else {
                 tempAdvertiser = mBluetoothAdapter.getBluetoothLeAdvertiser();
-                tempCallback = new BleAdvertiseModule.SimpleAdvertiseCallback(promise);
+                tempCallback = new SimpleAdvertiseCallback(promise);
             }
 
             if (tempAdvertiser == null) {
-                Log.w("BleAdvertiseModule", "Advertiser Not Available unavailable");
-                promise.reject("Advertiser unavailable on this device");
+                Log.w(NAME, "Advertiser unavailable on this device");
+                promise.reject("E_ADVERTISER_UNAVAILABLE", "Advertiser unavailable");
                 return;
             }
 
-            byte[] majorBytes = intToByteArray((int)major);
-            byte[] minorBytes = intToByteArray((int)minor);
-
+            byte[] majorBytes = intToByteArray((int) major);
+            byte[] minorBytes = intToByteArray((int) minor);
             byte[] payload = new byte[4];
             payload[0] = majorBytes[0];
             payload[1] = majorBytes[1];
@@ -114,96 +110,68 @@ public class BleAdvertiseModule extends NativeBleAdvertiseSpec {
             AdvertiseData data = buildAdvertiseData(uid, payload);
 
             tempAdvertiser.startAdvertising(settings, data, tempCallback);
-
             mAdvertiserList.put(uid, tempAdvertiser);
             mAdvertiserCallbackList.put(uid, tempCallback);
 
             promise.resolve("Advertising started");
         } catch (Exception e) {
-            promise.reject(e);
+            promise.reject("E_BROADCAST_FAILED", e);
         }
     }
 
-    public static final byte[] intToByteArray(int value) {
-        return new byte[]{
-            (byte) (value >>> 8),
-            (byte) value};
+    public static byte[] intToByteArray(int value) {
+        return new byte[]{(byte) (value >>> 8), (byte) value};
     }
 
     private AdvertiseSettings buildAdvertiseSettings() {
-        AdvertiseSettings.Builder settingsBuilder = new AdvertiseSettings.Builder();
-        settingsBuilder.setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_LATENCY);
-        settingsBuilder.setTxPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_HIGH);
-        return settingsBuilder.build();
+        return new AdvertiseSettings.Builder()
+            .setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_LATENCY)
+            .setTxPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_HIGH)
+            .build();
     }
 
     private AdvertiseData buildAdvertiseData(String sUUID, byte[] payload) {
         byte[] MYUUID = UnicodeFormatter.getIdAsByte(UUID.fromString(sUUID));
-
-        AdvertiseData.Builder dataBuilder = new AdvertiseData.Builder();
-
         ByteBuffer mManufacturerData = ByteBuffer.allocate(24);
-        mManufacturerData.put(0, (byte) 0x02); // Beacon Identifier
-        mManufacturerData.put(1, (byte) 0x15); // Beacon Identifier
+        mManufacturerData.put(0, (byte) 0x02);
+        mManufacturerData.put(1, (byte) 0x15);
         for (int i = 2; i < 18; i++) {
-            mManufacturerData.put(i, MYUUID[i - 2]); // adding the UUID
+            mManufacturerData.put(i, MYUUID[i - 2]);
         }
         for (int j = 18; j < 18 + payload.length; j++) {
-            mManufacturerData.put(j, payload[j - 18]);  //MAJOR MINOR
+            mManufacturerData.put(j, payload[j - 18]);
         }
-
-        mManufacturerData.put(18 + payload.length, (byte) 0xC7); // Tx power
-        dataBuilder.addManufacturerData(companyId, mManufacturerData.array());
-
-        return dataBuilder.build();
+        mManufacturerData.put(18 + payload.length, (byte) 0xC7);
+        return new AdvertiseData.Builder()
+            .addManufacturerData(companyId, mManufacturerData.array())
+            .build();
     }
 
-    @Override
+    @ReactMethod
     public void stopBroadcast(Promise promise) {
-        Log.w("BleAdvertiseModule", "Stop Broadcast call");
-
-        if (mBluetoothAdapter == null) {
-            Log.w("BleAdvertiseModule", "mBluetoothAdapter unavailable");
-            promise.reject("mBluetoothAdapter unavailable");
-            return;
-        }
-
-        if (mBluetoothAdapter.isEnabled() == false) {
-            Log.w("BleAdvertiseModule", "Bluetooth disabled");
-            promise.reject("Bluetooth disabled");
+        if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) {
+            promise.reject("E_STOP_FAILED", "Bluetooth unavailable or disabled");
             return;
         }
-
-        WritableArray promiseArray = Arguments.createArray();
-
-        Set<String> keys = mAdvertiserList.keySet();
-        for (String key : keys) {
-            BluetoothLeAdvertiser tempAdvertiser = mAdvertiserList.remove(key);
-            AdvertiseCallback tempCallback = mAdvertiserCallbackList.remove(key);
-            if (tempAdvertiser != null) {
-                tempAdvertiser.stopAdvertising(tempCallback);
-                promiseArray.pushString(key);
+        WritableArray result = Arguments.createArray();
+        for (String key : mAdvertiserList.keySet()) {
+            BluetoothLeAdvertiser advertiser = mAdvertiserList.remove(key);
+            AdvertiseCallback callback = mAdvertiserCallbackList.remove(key);
+            if (advertiser != null) {
+                advertiser.stopAdvertising(callback);
+                result.pushString(key);
             }
         }
-
-        promise.resolve(promiseArray);
+        promise.resolve(result);
     }
 
-    @Override
+    @ReactMethod
     public void checkIfBLESupported(Promise promise) {
-        if (mBluetoothAdapter != null) {
-            promise.resolve("80");
-        } else {
-            promise.resolve("100");
-        }
+        promise.resolve(mBluetoothAdapter != null ? 80 : 100);
     }
 
     private class SimpleAdvertiseCallback extends AdvertiseCallback {
-
-        Promise promise;
-
-        public SimpleAdvertiseCallback() {
-        }
+        private final Promise promise;
 
         public SimpleAdvertiseCallback(Promise promise) {
             this.promise = promise;
@@ -213,39 +181,33 @@ public class BleAdvertiseModule extends NativeBleAdvertiseSpec {
         public void onStartFailure(int errorCode) {
             super.onStartFailure(errorCode);
             Log.i(NAME, "Advertising failed with code " + errorCode);
-
-            if (promise == null) {
-                return;
-            }
-
+            if (promise == null) return;
+            String message;
             switch (errorCode) {
                 case ADVERTISE_FAILED_FEATURE_UNSUPPORTED:
-                    promise.reject("This feature is not supported on this platform.", "This feature is not supported on this platform.");
+                    message = "Feature not supported";
                     break;
                 case ADVERTISE_FAILED_TOO_MANY_ADVERTISERS:
-                    promise.reject("Failed to start advertising because no advertising instance is available.", "Failed to start advertising because no advertising instance is available.");
+                    message = "Too many advertisers";
                     break;
                 case ADVERTISE_FAILED_ALREADY_STARTED:
-                    promise.reject("Failed to start advertising as the advertising is already started.", "Failed to start advertising as the advertising is already started.");
+                    message = "Already started";
                     break;
                 case ADVERTISE_FAILED_DATA_TOO_LARGE:
-                    promise.reject("Failed to start advertising as the advertise data to be broadcasted is larger than 31 bytes.", "Failed to start advertising as the advertise data to be broadcasted is larger than 31 bytes.");
-                    break;
-                case ADVERTISE_FAILED_INTERNAL_ERROR:
-                    promise.reject("Operation failed due to an internal error.", "Operation failed due to an internal error.");
+                    message = "Data too large";
                     break;
+                default:
+                    message = "Internal error";
             }
+            promise.reject("E_ADVERTISE_FAILED", message);
         }
 
         @Override
         public void onStartSuccess(AdvertiseSettings settingsInEffect) {
             super.onStartSuccess(settingsInEffect);
-            Log.i(NAME, "Advertising successful");
-
-            if (promise == null) {
-                return;
+            if (promise != null) {
+                promise.resolve("Advertising successful");
             }
-            promise.resolve(settingsInEffect.toString());
         }
     }
 }
